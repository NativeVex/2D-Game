using UnityEngine;
using System.Collections;

public class AttackScript : MonoBehaviour {
<<<<<<< HEAD
||||||| merged common ancestors
	public Vector3 direction;
    public float speed = 1f;
=======
	public Vector3 direction;
	public float speed = 1f;
>>>>>>> e12b95ad8c3b3dafeaaec19b75bd755b0d39949a
	public string[] tags;
<<<<<<< HEAD
	public float dmg;
	public GameObject Parent;
||||||| merged common ancestors

    Animator anim;
	GameObject Parent;

    void Start () {
		Parent = this.gameObject.transform.parent.gameObject;
		anim = Parent.gameObject.GetComponent<Animator>();
		Parent.transform.position = direction;
	}
	
=======

	Animator anim;
	GameObject Parent;

	void Start () {
		Parent = this.gameObject.transform.parent.gameObject;
		anim = Parent.gameObject.GetComponent<Animator>();
		Parent.transform.position = direction;
	}

>>>>>>> e12b95ad8c3b3dafeaaec19b75bd755b0d39949a
	void Update () {
<<<<<<< HEAD
		if (Parent.GetComponent<Animator>().GetCurrentAnimatorStateInfo (0).IsName ("Destroy")) {
			Destroy (Parent);
			Destroy (gameObject);
		}
	}
||||||| merged common ancestors
        if (anim.GetCurrentAnimatorStateInfo(0).IsName("Destroy"))
        {
			Destroy(gameObject.transform.parent.gameObject);
        }
//        else
//        {
//            if (gameObject.tag.Equals("Player"))
//            {
//                if (direction.Equals("up"))
//                {
//                    gameObject.transform.Translate(Vector3.forward * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("down"))
//                {
//                    gameObject.transform.Translate(Vector3.back * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("left"))
//                {
//                    gameObject.transform.Translate(Vector3.left * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("right"))
//                {
//                    gameObject.transform.Translate(Vector3.right * speed * Time.deltaTime);
//                }
//            }
//            else if (gameObject.tag.Equals("Enemy"))
//            {
//                if (direction.Equals("up"))
//                {
//                    
//                    gameObject.transform.Translate(Vector3.forward * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("down"))
//                {
//                    gameObject.transform.Translate(Vector3.back * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("left"))
//                {
//                    gameObject.transform.Translate(Vector3.left * speed * Time.deltaTime);
//                }
//                else if (direction.Equals("right"))
//                {
//                    gameObject.transform.Translate(Vector3.right * speed * Time.deltaTime);
//                }
//            }
//        }
    }

=======
		if (anim.GetCurrentAnimatorStateInfo(0).IsName("Destroy"))
		{
			Destroy(gameObject.transform.parent.gameObject);
		}
	}

	void OnCollisionEnter(Collider col)
	{
		foreach(string temp in tags){
			if (col.gameObject.tag.Equals(temp))
			{
				Destroy(gameObject);
			}
		}
	}
}

>>>>>>> e12b95ad8c3b3dafeaaec19b75bd755b0d39949a
    void OnCollisionEnter(Collider col)
    {
        if (col.gameObject.tag.Equals("Enemy"))
        {
            Destroy(gameObject);
        }
    }
}

	void OnCollisionEnter(Collider col)
	{
		foreach(string temp in tags){
			if (col.gameObject.tag.Equals(temp))
<<<<<<< HEAD
	        {
				col.gameObject.GetComponent<HP> ().health-=dmg;
				Destroy(Parent);
	        }
||||||| merged common ancestors
	        {
	            Destroy(gameObject);
	        }
=======
			{
				Destroy(gameObject);
			}
>>>>>>> e12b95ad8c3b3dafeaaec19b75bd755b0d39949a
		}
	} */
}

